{"ast":null,"code":"'use strict';\n\nvar assign = require('object-assign');\n\nvar copyAttributes = require('./utils/copy-attributes');\n\nvar loadXml = require('./utils/load-xml');\n\nvar removeAttributes = require('./utils/remove-attributes');\n\nvar setAttributes = require('./utils/set-attributes');\n\nvar svgToSymbol = require('./utils/svg-to-symbol');\n\nvar SELECTOR_SVG = 'svg';\nvar SELECTOR_DEFS = 'defs';\nvar TEMPLATE_SVG = '<svg><defs/></svg>';\nvar TEMPLATE_DOCTYPE = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ' + '\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\nvar DEFAULT_OPTIONS = {\n  cleanDefs: false,\n  cleanSymbols: false,\n  inline: false,\n  svgAttrs: false,\n  symbolAttrs: false,\n  copyAttrs: false,\n  renameDefs: false\n};\n\nfunction svgstore(options) {\n  var svgstoreOptions = assign({}, DEFAULT_OPTIONS, options); // <svg>\n\n  var parent = loadXml(TEMPLATE_SVG);\n  var parentSvg = parent(SELECTOR_SVG);\n  var parentDefs = parent(SELECTOR_DEFS);\n  return {\n    element: parent,\n    add: function (id, file, options) {\n      var child = loadXml(file);\n      var addOptions = assign({}, svgstoreOptions, options); // <defs>\n\n      var childDefs = child(SELECTOR_DEFS);\n      removeAttributes(childDefs, addOptions.cleanDefs);\n      /* rename defs ids */\n\n      if (addOptions.renameDefs) {\n        childDefs.children().each(function (i, _elem) {\n          var elem = child(_elem);\n          var oldDefId = elem.attr('id');\n          var newDefId = id + '_' + oldDefId;\n          elem.attr('id', newDefId);\n          /* process use tags */\n\n          child('use').each(function (i, use) {\n            var hrefLink = '#' + oldDefId;\n            var checkableProperties = ['xlink:href', 'href'];\n            var foundProperty;\n\n            for (var j = 0; j < checkableProperties.length; j++) {\n              var currentProperty = checkableProperties[j];\n\n              if (child(use).prop(currentProperty) === hrefLink) {\n                foundProperty = currentProperty;\n                break;\n              }\n            }\n\n            if (!foundProperty) {\n              return;\n            }\n\n            child(use).attr(foundProperty, '#' + newDefId);\n          });\n          /* process fill attributes */\n\n          child('[fill=\"url(#' + oldDefId + ')\"]').each(function (i, use) {\n            child(use).attr('fill', 'url(#' + newDefId + ')');\n          });\n        });\n      }\n\n      parentDefs.append(childDefs.contents());\n      childDefs.remove(); // <symbol>\n\n      var childSvg = child(SELECTOR_SVG);\n      var childSymbol = svgToSymbol(id, child, addOptions);\n      removeAttributes(childSymbol, addOptions.cleanSymbols);\n      copyAttributes(childSymbol, childSvg, addOptions.copyAttrs);\n      setAttributes(childSymbol, addOptions.symbolAttrs);\n      parentSvg.append(childSymbol);\n      return this;\n    },\n    toString: function (options) {\n      // Create a clone so we don't modify the parent document.\n      var clone = loadXml(parent.xml());\n      var toStringOptions = assign({}, svgstoreOptions, options); // <svg>\n\n      var svg = clone(SELECTOR_SVG);\n      setAttributes(svg, toStringOptions.svgAttrs); // output inline\n\n      if (toStringOptions.inline) {\n        return clone.xml();\n      } // output standalone\n\n\n      svg.attr('xmlns', function (val) {\n        return val || 'http://www.w3.org/2000/svg';\n      });\n      svg.attr('xmlns:xlink', function (val) {\n        return val || 'http://www.w3.org/1999/xlink';\n      });\n      return TEMPLATE_DOCTYPE + clone.xml();\n    }\n  };\n}\n\nmodule.exports = svgstore;","map":{"version":3,"sources":["/Users/markharless/Desktop/test/node_modules/svgstore/src/svgstore.js"],"names":["assign","require","copyAttributes","loadXml","removeAttributes","setAttributes","svgToSymbol","SELECTOR_SVG","SELECTOR_DEFS","TEMPLATE_SVG","TEMPLATE_DOCTYPE","DEFAULT_OPTIONS","cleanDefs","cleanSymbols","inline","svgAttrs","symbolAttrs","copyAttrs","renameDefs","svgstore","options","svgstoreOptions","parent","parentSvg","parentDefs","element","add","id","file","child","addOptions","childDefs","children","each","i","_elem","elem","oldDefId","attr","newDefId","use","hrefLink","checkableProperties","foundProperty","j","length","currentProperty","prop","append","contents","remove","childSvg","childSymbol","toString","clone","xml","toStringOptions","svg","val","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,eAAD,CAApB;;AAEA,IAAIC,cAAc,GAAGD,OAAO,CAAC,yBAAD,CAA5B;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,kBAAD,CAArB;;AACA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,2BAAD,CAA9B;;AACA,IAAII,aAAa,GAAGJ,OAAO,CAAC,wBAAD,CAA3B;;AACA,IAAIK,WAAW,GAAGL,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIM,YAAY,GAAG,KAAnB;AACA,IAAIC,aAAa,GAAG,MAApB;AAEA,IAAIC,YAAY,GAAG,oBAAnB;AACA,IAAIC,gBAAgB,GAAG,2CACtB,iDADsB,GAEtB,qDAFD;AAIA,IAAIC,eAAe,GAAG;AACrBC,EAAAA,SAAS,EAAE,KADU;AAErBC,EAAAA,YAAY,EAAE,KAFO;AAGrBC,EAAAA,MAAM,EAAE,KAHa;AAIrBC,EAAAA,QAAQ,EAAE,KAJW;AAKrBC,EAAAA,WAAW,EAAE,KALQ;AAMrBC,EAAAA,SAAS,EAAE,KANU;AAOrBC,EAAAA,UAAU,EAAE;AAPS,CAAtB;;AAUA,SAASC,QAAT,CAAkBC,OAAlB,EAA2B;AAC1B,MAAIC,eAAe,GAAGrB,MAAM,CAAC,EAAD,EAAKW,eAAL,EAAsBS,OAAtB,CAA5B,CAD0B,CAG1B;;AACA,MAAIE,MAAM,GAAGnB,OAAO,CAACM,YAAD,CAApB;AACA,MAAIc,SAAS,GAAGD,MAAM,CAACf,YAAD,CAAtB;AACA,MAAIiB,UAAU,GAAGF,MAAM,CAACd,aAAD,CAAvB;AAEA,SAAO;AACNiB,IAAAA,OAAO,EAAEH,MADH;AAGNI,IAAAA,GAAG,EAAE,UAAUC,EAAV,EAAcC,IAAd,EAAoBR,OAApB,EAA6B;AACjC,UAAIS,KAAK,GAAG1B,OAAO,CAACyB,IAAD,CAAnB;AACA,UAAIE,UAAU,GAAG9B,MAAM,CAAC,EAAD,EAAKqB,eAAL,EAAsBD,OAAtB,CAAvB,CAFiC,CAIjC;;AACA,UAAIW,SAAS,GAAGF,KAAK,CAACrB,aAAD,CAArB;AAEAJ,MAAAA,gBAAgB,CAAC2B,SAAD,EAAYD,UAAU,CAAClB,SAAvB,CAAhB;AAEA;;AACA,UAAIkB,UAAU,CAACZ,UAAf,EAA2B;AAC1Ba,QAAAA,SAAS,CAACC,QAAV,GAAqBC,IAArB,CAA0B,UAAUC,CAAV,EAAaC,KAAb,EAAoB;AAC7C,cAAIC,IAAI,GAAGP,KAAK,CAACM,KAAD,CAAhB;AACA,cAAIE,QAAQ,GAAGD,IAAI,CAACE,IAAL,CAAU,IAAV,CAAf;AACA,cAAIC,QAAQ,GAAGZ,EAAE,GAAG,GAAL,GAAWU,QAA1B;AACAD,UAAAA,IAAI,CAACE,IAAL,CAAU,IAAV,EAAgBC,QAAhB;AAEA;;AACAV,UAAAA,KAAK,CAAC,KAAD,CAAL,CAAaI,IAAb,CAAkB,UAAUC,CAAV,EAAaM,GAAb,EAAkB;AACnC,gBAAIC,QAAQ,GAAG,MAAMJ,QAArB;AACA,gBAAIK,mBAAmB,GAAG,CAAC,YAAD,EAAe,MAAf,CAA1B;AACA,gBAAIC,aAAJ;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,mBAAmB,CAACG,MAAxC,EAAgDD,CAAC,EAAjD,EAAqD;AACpD,kBAAIE,eAAe,GAAGJ,mBAAmB,CAACE,CAAD,CAAzC;;AACA,kBAAIf,KAAK,CAACW,GAAD,CAAL,CAAWO,IAAX,CAAgBD,eAAhB,MAAqCL,QAAzC,EAAmD;AAClDE,gBAAAA,aAAa,GAAGG,eAAhB;AACA;AACA;AACD;;AACD,gBAAI,CAACH,aAAL,EAAoB;AACnB;AACA;;AACDd,YAAAA,KAAK,CAACW,GAAD,CAAL,CAAWF,IAAX,CAAgBK,aAAhB,EAA+B,MAAMJ,QAArC;AACA,WAfD;AAiBA;;AACAV,UAAAA,KAAK,CAAC,iBAAiBQ,QAAjB,GAA4B,KAA7B,CAAL,CAAyCJ,IAAzC,CAA8C,UAAUC,CAAV,EAAaM,GAAb,EAAkB;AAC/DX,YAAAA,KAAK,CAACW,GAAD,CAAL,CAAWF,IAAX,CAAgB,MAAhB,EAAwB,UAAUC,QAAV,GAAqB,GAA7C;AACA,WAFD;AAGA,SA5BD;AA6BA;;AAEDf,MAAAA,UAAU,CAACwB,MAAX,CAAkBjB,SAAS,CAACkB,QAAV,EAAlB;AACAlB,MAAAA,SAAS,CAACmB,MAAV,GA3CiC,CA6CjC;;AACA,UAAIC,QAAQ,GAAGtB,KAAK,CAACtB,YAAD,CAApB;AACA,UAAI6C,WAAW,GAAG9C,WAAW,CAACqB,EAAD,EAAKE,KAAL,EAAYC,UAAZ,CAA7B;AAEA1B,MAAAA,gBAAgB,CAACgD,WAAD,EAActB,UAAU,CAACjB,YAAzB,CAAhB;AACAX,MAAAA,cAAc,CAACkD,WAAD,EAAcD,QAAd,EAAwBrB,UAAU,CAACb,SAAnC,CAAd;AACAZ,MAAAA,aAAa,CAAC+C,WAAD,EAActB,UAAU,CAACd,WAAzB,CAAb;AACAO,MAAAA,SAAS,CAACyB,MAAV,CAAiBI,WAAjB;AAEA,aAAO,IAAP;AACA,KA1DK;AA4DNC,IAAAA,QAAQ,EAAE,UAAUjC,OAAV,EAAmB;AAC5B;AACA,UAAIkC,KAAK,GAAGnD,OAAO,CAACmB,MAAM,CAACiC,GAAP,EAAD,CAAnB;AACA,UAAIC,eAAe,GAAGxD,MAAM,CAAC,EAAD,EAAKqB,eAAL,EAAsBD,OAAtB,CAA5B,CAH4B,CAK5B;;AACA,UAAIqC,GAAG,GAAGH,KAAK,CAAC/C,YAAD,CAAf;AAEAF,MAAAA,aAAa,CAACoD,GAAD,EAAMD,eAAe,CAACzC,QAAtB,CAAb,CAR4B,CAU5B;;AACA,UAAIyC,eAAe,CAAC1C,MAApB,EAA4B;AAC3B,eAAOwC,KAAK,CAACC,GAAN,EAAP;AACA,OAb2B,CAe5B;;;AACAE,MAAAA,GAAG,CAACnB,IAAJ,CAAS,OAAT,EAAkB,UAAUoB,GAAV,EAAe;AAChC,eAAOA,GAAG,IAAI,4BAAd;AACA,OAFD;AAIAD,MAAAA,GAAG,CAACnB,IAAJ,CAAS,aAAT,EAAwB,UAAUoB,GAAV,EAAe;AACtC,eAAOA,GAAG,IAAI,8BAAd;AACA,OAFD;AAIA,aAAOhD,gBAAgB,GAAG4C,KAAK,CAACC,GAAN,EAA1B;AACA;AArFK,GAAP;AAuFA;;AAEDI,MAAM,CAACC,OAAP,GAAiBzC,QAAjB","sourcesContent":["'use strict';\n\nvar assign = require('object-assign');\n\nvar copyAttributes = require('./utils/copy-attributes');\nvar loadXml = require('./utils/load-xml');\nvar removeAttributes = require('./utils/remove-attributes');\nvar setAttributes = require('./utils/set-attributes');\nvar svgToSymbol = require('./utils/svg-to-symbol');\n\nvar SELECTOR_SVG = 'svg';\nvar SELECTOR_DEFS = 'defs';\n\nvar TEMPLATE_SVG = '<svg><defs/></svg>';\nvar TEMPLATE_DOCTYPE = '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' +\n\t'<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ' +\n\t'\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">';\n\nvar DEFAULT_OPTIONS = {\n\tcleanDefs: false,\n\tcleanSymbols: false,\n\tinline: false,\n\tsvgAttrs: false,\n\tsymbolAttrs: false,\n\tcopyAttrs: false,\n\trenameDefs: false\n};\n\nfunction svgstore(options) {\n\tvar svgstoreOptions = assign({}, DEFAULT_OPTIONS, options);\n\n\t// <svg>\n\tvar parent = loadXml(TEMPLATE_SVG);\n\tvar parentSvg = parent(SELECTOR_SVG);\n\tvar parentDefs = parent(SELECTOR_DEFS);\n\n\treturn {\n\t\telement: parent,\n\n\t\tadd: function (id, file, options) {\n\t\t\tvar child = loadXml(file);\n\t\t\tvar addOptions = assign({}, svgstoreOptions, options);\n\n\t\t\t// <defs>\n\t\t\tvar childDefs = child(SELECTOR_DEFS);\n\n\t\t\tremoveAttributes(childDefs, addOptions.cleanDefs);\n\n\t\t\t/* rename defs ids */\n\t\t\tif (addOptions.renameDefs) {\n\t\t\t\tchildDefs.children().each(function (i, _elem) {\n\t\t\t\t\tvar elem = child(_elem);\n\t\t\t\t\tvar oldDefId = elem.attr('id');\n\t\t\t\t\tvar newDefId = id + '_' + oldDefId;\n\t\t\t\t\telem.attr('id', newDefId);\n\n\t\t\t\t\t/* process use tags */\n\t\t\t\t\tchild('use').each(function (i, use) {\n\t\t\t\t\t\tvar hrefLink = '#' + oldDefId;\n\t\t\t\t\t\tvar checkableProperties = ['xlink:href', 'href'];\n\t\t\t\t\t\tvar foundProperty;\n\t\t\t\t\t\tfor (var j = 0; j < checkableProperties.length; j++) {\n\t\t\t\t\t\t\tvar currentProperty = checkableProperties[j];\n\t\t\t\t\t\t\tif (child(use).prop(currentProperty) === hrefLink) {\n\t\t\t\t\t\t\t\tfoundProperty = currentProperty;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!foundProperty) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchild(use).attr(foundProperty, '#' + newDefId);\n\t\t\t\t\t});\n\n\t\t\t\t\t/* process fill attributes */\n\t\t\t\t\tchild('[fill=\"url(#' + oldDefId + ')\"]').each(function (i, use) {\n\t\t\t\t\t\tchild(use).attr('fill', 'url(#' + newDefId + ')');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tparentDefs.append(childDefs.contents());\n\t\t\tchildDefs.remove();\n\n\t\t\t// <symbol>\n\t\t\tvar childSvg = child(SELECTOR_SVG);\n\t\t\tvar childSymbol = svgToSymbol(id, child, addOptions);\n\n\t\t\tremoveAttributes(childSymbol, addOptions.cleanSymbols);\n\t\t\tcopyAttributes(childSymbol, childSvg, addOptions.copyAttrs);\n\t\t\tsetAttributes(childSymbol, addOptions.symbolAttrs);\n\t\t\tparentSvg.append(childSymbol);\n\n\t\t\treturn this;\n\t\t},\n\n\t\ttoString: function (options) {\n\t\t\t// Create a clone so we don't modify the parent document.\n\t\t\tvar clone = loadXml(parent.xml());\n\t\t\tvar toStringOptions = assign({}, svgstoreOptions, options);\n\n\t\t\t// <svg>\n\t\t\tvar svg = clone(SELECTOR_SVG);\n\n\t\t\tsetAttributes(svg, toStringOptions.svgAttrs);\n\n\t\t\t// output inline\n\t\t\tif (toStringOptions.inline) {\n\t\t\t\treturn clone.xml();\n\t\t\t}\n\n\t\t\t// output standalone\n\t\t\tsvg.attr('xmlns', function (val) {\n\t\t\t\treturn val || 'http://www.w3.org/2000/svg';\n\t\t\t});\n\n\t\t\tsvg.attr('xmlns:xlink', function (val) {\n\t\t\t\treturn val || 'http://www.w3.org/1999/xlink';\n\t\t\t});\n\n\t\t\treturn TEMPLATE_DOCTYPE + clone.xml();\n\t\t}\n\t};\n}\n\nmodule.exports = svgstore;\n"]},"metadata":{},"sourceType":"script"}